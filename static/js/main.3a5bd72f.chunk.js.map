{"version":3,"sources":["Components/Element.js","Components/Nav.js","Components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Element","props","id","value","onClick","className","src","alt","Nav","href","score","highScore","Wrapper","state","elements","img","clickedElements","lost","handleOnClick","event","target","setState","forEach","element","push","shuffle","a","i","length","j","Math","floor","random","reset","lostGame","this","map","result","style","width","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a5bd72f.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nfunction Element(props) {\r\n  return (\r\n    <img \r\n      id={props.id}\r\n      value={props.value}\r\n      onClick={props.onClick}\r\n      className=\"img-thumbnail float-left  img-fluid w-100 h-100 \"\r\n      src={props.value}\r\n      alt=\"\"\r\n    ></img>\r\n  );\r\n}\r\nexport default Element;","import React from \"react\";\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n        Clicky Memory Game\r\n      </a>\r\n      <div className=\"float-right\">\r\n        Score: {props.score}| Top Score{props.highScore}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\r\nimport Element from \"./Element\";\r\nimport Nav from \"./Nav\";\r\n\r\nclass Wrapper extends Component {\r\n  // Setting the component's initial state\r\n  state = {\r\n    elements: [\r\n      { img: \"./img/00.png\", id: \"a\" },\r\n      { img: \"./img/01.jpg\", id: \"b\" },\r\n      { img: \"./img/02.jpg\", id: \"c\" },\r\n      { img: \"./img/03.png\", id: \"d\" },\r\n      { img: \"./img/04.jpg\", id: \"e\" },\r\n      { img: \"./img/05.jpg\", id: \"f\" },\r\n      { img: \"./img/06.jpg\", id: \"g\" },\r\n      { img: \"./img/07.jpg\", id: \"h\" },\r\n      { img: \"./img/08.jpg\", id: \"i\" },\r\n      { img: \"./img/09.jpg\", id: \"j\" },\r\n      { img: \"./img/10.png\", id: \"k\" },\r\n      { img: \"./img/11.jpg\", id: \"l\" }\r\n    ],\r\n    clickedElements: [],\r\n    score: 0,\r\n    highScore: 0,\r\n    lost: false\r\n  };\r\n\r\n  handleOnClick = event => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { id } = event.target;\r\n    this.setState({ score: this.state.score + 1 });\r\n\r\n    this.state.clickedElements.forEach(element => {\r\n      if (id === element.id) {\r\n        if (this.state.highScore < this.state.score) {\r\n          this.setState({ highScore: this.state.score });\r\n        }\r\n        this.setState({ lost: true, score: 0 });\r\n      }\r\n    });\r\n    this.state.clickedElements.push({ id: id });\r\n    this.shuffle();\r\n  };\r\n  shuffle = () => {\r\n    const a = this.state.elements;\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return this.setState(a);\r\n  };\r\n  reset = () => {\r\n    this.setState({\r\n      clickedElements: [],\r\n      score: 0,\r\n      lost: false\r\n    });\r\n  };\r\n  render() {\r\n    let lostGame;\r\n\r\n    if (this.state.lost) {\r\n      lostGame = (\r\n        <div className=\"float-center restart\">\r\n          <h5>You lost! Try again!!</h5>\r\n          <button className=\"btn btn-outline-primary\" onClick={this.reset}>Restart</button>\r\n        </div>\r\n      );\r\n    } else {\r\n      lostGame = (\r\n        <div className=\"row w-100 justify-content-center images-div\">\r\n          {this.state.elements.map(result => (\r\n            <div className=\"in-img\" style={{ width: \"25%\" }} key={result.id}>\r\n              <Element\r\n                value={result.img}\r\n                id={result.id}\r\n                onClick={this.handleOnClick}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        {\r\n          <Nav\r\n            highScore={this.state.highScore}\r\n            score={this.state.score}\r\n            lost={this.state.lost}\r\n          ></Nav>\r\n        }\r\n        {lostGame}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Wrapper;\r\n","import React from \"react\";\nimport Wrapper from \"./Components/Wrapper\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"content-fluid\">\n        <Wrapper/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}